name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (skip PyPI publish and create draft release)'
        required: false
        type: boolean
        default: false

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      dry_run: ${{ github.event.inputs.dry_run }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml
          
      - name: Bump version
        id: bump
        run: |
          python << 'EOF'
          import toml
          import os
          
          # Read pyproject.toml
          with open('pyproject.toml', 'r') as f:
              data = toml.load(f)
          
          current_version = data['project']['version']
          new_version = os.environ.get('NEW_VERSION')
          
          print(f"Current version: {current_version}")
          print(f"New version: {new_version}")
          
          # Update version in pyproject.toml
          data['project']['version'] = new_version
          with open('pyproject.toml', 'w') as f:
              toml.dump(data, f)
          
          # Write to GitHub output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"new_version={new_version}\n")
          EOF
        env:
          NEW_VERSION: ${{ github.event.inputs.version }}
          
      - name: Commit version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pyproject.toml
          git commit -m "Bump version to ${{ steps.bump.outputs.new_version }}"
          git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release v${{ steps.bump.outputs.new_version }}"
          git push origin main
          git push origin "v${{ steps.bump.outputs.new_version }}"

  build-and-publish:
    needs: bump-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.bump-version.outputs.new_version }}
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build hatchling
          
      - name: Build package
        run: python -m build
        
      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "v${{ needs.bump-version.outputs.new_version }}" | head -n 1)
          
          echo "Generating release notes from $PREVIOUS_TAG to v${{ needs.bump-version.outputs.new_version }}"
          
          # Generate commit log
          COMMITS=$(git log $PREVIOUS_TAG..v${{ needs.bump-version.outputs.new_version }} --pretty=format:"- %s (%h)" --no-merges)
          
          # Create release notes
          cat << EOF > release_notes.md
          ## What's Changed
          
          $COMMITS
          
          EOF
          
          echo "Release notes generated successfully"
          cat release_notes.md
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.bump-version.outputs.new_version }}
          name: Release v${{ needs.bump-version.outputs.new_version }}${{ needs.bump-version.outputs.dry_run == 'true' && ' (DRY RUN)' || '' }}
          body_path: release_notes.md
          files: |
            dist/*
          draft: ${{ needs.bump-version.outputs.dry_run == 'true' }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Publish to PyPI
        if: ${{ needs.bump-version.outputs.dry_run != 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

