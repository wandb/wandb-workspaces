name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (skip PyPI publish)'
        required: false
        type: boolean
        default: false

jobs:
  create-release-pr:
    name: Create Release PR
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      branch_name: ${{ steps.create_branch.outputs.branch_name }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.11'
          
      - name: Setup git config
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      
      - name: Install toml
        run: pip install toml
      
      - name: Create release branch
        id: create_branch
        run: |
          BRANCH_NAME="release/v${{ inputs.version }}"
          git checkout -b $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
      - name: Bump version
        run: |
          python << 'EOF'
          import toml
          
          # Read pyproject.toml
          with open('pyproject.toml', 'r') as f:
              data = toml.load(f)
          
          current_version = data['project']['version']
          new_version = "${{ inputs.version }}"
          
          print(f"Current version: {current_version}")
          print(f"New version: {new_version}")
          
          # Update version
          data['project']['version'] = new_version
          
          # Write back to pyproject.toml
          with open('pyproject.toml', 'w') as f:
              toml.dump(data, f)
          EOF
          
      - name: Commit and push changes
        run: |
          git add pyproject.toml
          git commit -m "chore(release): bump version to ${{ inputs.version }}"
          git push origin ${{ steps.create_branch.outputs.branch_name }}
          
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --base main \
            --head ${{ steps.create_branch.outputs.branch_name }} \
            --title "chore(release): bump version to v${{ inputs.version }}" \
            --body "This PR bumps the version to ${{ inputs.version }} for release.

          ## Automated Actions Completed
          - ✅ Package built
          - ✅ Draft GitHub release created
          - ${{ inputs.dry_run && '⏭️ PyPI publish skipped (dry run)' || '✅ Published to PyPI' }}
          
          ## Next Steps
          1. Review this PR
          2. Merge this PR to main
          3. Review and publish the draft release on GitHub"

  build-and-publish:
    name: Build and Publish
    needs: create-release-pr
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      
    steps:
      - name: Checkout release branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ needs.create-release-pr.outputs.branch_name }}
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.11'
          
      - name: Install uv
        uses: astral-sh/setup-uv@5f42d5af6c403a722299fda36d451c39f302a433 # v4.1.0
          
      - name: Build package
        run: uv build
        
      - name: Generate release notes
        run: |
          python << 'EOF'
          import subprocess
          
          # Get the previous tag
          try:
              previous_tag = subprocess.check_output(
                  ['git', 'tag', '--sort=-version:refname'],
                  text=True
              ).strip().split('\n')[0]
              print(f"Previous tag: {previous_tag}")
              
              # Get commits since previous tag
              commits = subprocess.check_output(
                  ['git', 'log', f'{previous_tag}..HEAD', '--pretty=format:- %s (%h)', '--no-merges'],
                  text=True
              ).strip()
          except (subprocess.CalledProcessError, IndexError):
              print("No previous tag found, showing all commits")
              commits = subprocess.check_output(
                  ['git', 'log', '--pretty=format:- %s (%h)', '--no-merges'],
                  text=True
              ).strip()
          
          # Create release notes
          release_notes = "## What's Changed\n\n" + commits
          
          # Write to file
          with open('release_notes.txt', 'w', encoding='utf-8') as f:
              f.write(release_notes)
          
          print("Release notes generated successfully")
          print(release_notes)
          EOF
        
      - name: Create draft GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ inputs.version }} \
            --draft \
            --title "v${{ inputs.version }}" \
            --notes-file release_notes.txt \
            dist/*.whl \
            dist/*.tar.gz
          
      - name: Publish to PyPI
        if: ${{ !inputs.dry_run }}
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # release/v1
        with:
          print-hash: true
