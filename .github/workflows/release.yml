name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (skip PyPI publish and create draft release)'
        required: false
        type: boolean
        default: false

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      dry_run: ${{ inputs.dry_run }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.11'
          
      # Use the GHA bot credentials: https://api.github.com/users/github-actions%5Bbot%5D
      - name: Setup git config
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Install Dependencies
        run: pip install bump2version click

      - name: Create and Switch to Release Branch
        run: |
          git checkout -b release-${{ github.event.inputs.version }}
          
      - name: Bump version
        id: bump
        run: |
          python << 'EOF'
          import toml
          import os
          
          # Read pyproject.toml
          with open('pyproject.toml', 'r') as f:
              data = toml.load(f)
          
          current_version = data['project']['version']
          new_version = os.environ.get('NEW_VERSION')
          
          print(f"Current version: {current_version}")
          print(f"New version: {new_version}")
          
          # Update version in pyproject.toml
          data['project']['version'] = new_version
          with open('pyproject.toml', 'w') as f:
              toml.dump(data, f)
          
          # Write to GitHub output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"new_version={new_version}\n")
          EOF
        env:
          NEW_VERSION: ${{ inputs.version }}
          
      - name: Commit version bump
        run: |
          git add pyproject.toml
          git commit -m "Bump version to ${{ steps.bump.outputs.new_version }}"
          git push origin release-${{ github.event.inputs.version }}


  create-dev-branch:
    name: Create dev branch and PR
    needs: pypi-publish
    runs-on: ubuntu-latest
    if: ${{ inputs.update-changelog && !inputs.dry-run }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: release-${{ github.event.inputs.version }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install bump2version
        run: pip install bump2version

      - name: Setup git config
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Create and switch to dev branch
        run: |
          IFS='.' read -r major minor patch <<< "${{ github.event.inputs.version }}"
          new_version="${major}.${minor}.$((patch + 1)).dev1"
          git checkout -b bump-${new_version}
          bump2version patch --no-tag --no-commit --config-file .bumpversion.cfg --new-version ${new_version}
          git commit -am "chore(sdk): bump version to ${new_version}"
          git push -u origin bump-${new_version}

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IFS='.' read -r major minor patch <<< "${{ github.event.inputs.version }}"
          new_version="${major}.${minor}.$((patch + 1)).dev1"
          gh pr create --base main --head bump-${new_version} --title "chore(sdk): bump version to ${new_version}" --body "This PR bumps the version to the next dev version after the release of ${{ github.event.inputs.version }}."

  build-and-publish:
    needs: bump-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: v${{ needs.bump-version.outputs.new_version }}
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.11'
          
      - name: Install uv
        uses: astral-sh/setup-uv@5f42d5af6c403a722299fda36d451c39f302a433 # v4.1.0
          
      - name: Build package
        run: uv build

        
      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "v${{ needs.bump-version.outputs.new_version }}" | head -n 1)
          
          echo "Generating release notes from $PREVIOUS_TAG to v${{ needs.bump-version.outputs.new_version }}"
          
          # Generate commit log
          COMMITS=$(git log $PREVIOUS_TAG..v${{ needs.bump-version.outputs.new_version }} --pretty=format:"- %s (%h)" --no-merges)
          
          # Create release notes
          cat << EOF > release_notes.md
          ## What's Changed
          
          $COMMITS
          
          EOF
          
          echo "Release notes generated successfully"
          cat release_notes.md
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@7b4da11513bf3f43f9999e90eabced41ab8bb048 # v2.2.0
        with:
          name: v${{ github.event.inputs.version }}
          tag_name: v${{ github.event.inputs.version }}
          body_path: release_notes.md
          files: |
            dist/*
          draft: true
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Publish to PyPI
        if: inputs.dry_run != 'true'
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # release/v1
        with:
          print-hash: true

